import itertools

def distance(city1, city2):
    """Calculate Euclidean distance between two cities."""
    return ((city1[0] - city2[0])**2 + (city1[1] - city2[1])**2) ** 0.5

def total_distance(route, cities):
    """Calculate total distance for a route."""
    return sum(distance(cities[route[i]], cities[route[i + 1]]) for i in range(len(route) - 1))

def traveling_salesman(cities):
    """Find the shortest route to visit all cities exactly once."""
    num_cities = len(cities)
    shortest_distance = float('inf')
    shortest_route = None

    # Generate all possible permutations of the cities
    for permutation in itertools.permutations(range(num_cities)):
        route = list(permutation)
        route_distance = total_distance(route, cities)

        # Update shortest distance and route if a shorter route is found
        if route_distance < shortest_distance:
            shortest_distance = route_distance
            shortest_route = route

    return shortest_route, shortest_distance

if __name__ == "__main__":
    # Example usage
    cities = [(0, 0), (1, 2), (3, 1), (5, 3)]
    shortest_route, shortest_distance = traveling_salesman(cities)
    print("Shortest Route:", shortest_route)
    print("Shortest Distance:", shortest_distance)
