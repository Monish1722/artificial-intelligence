import itertools

def solve_cryptarithmetic(puzzle):
    letters = set([char for word in puzzle.split() for char in word if char.isalpha()])
    if len(letters) > 10:
        print("Invalid puzzle. More than 10 unique letters.")
        return None

    for permutation in itertools.permutations(range(10), len(letters)):
        mapping = dict(zip(letters, permutation))
        if is_solution(puzzle, mapping):
            return mapping
    print("No solution found.")
    return None

def is_solution(puzzle, mapping):
    words = puzzle.split()
    translated = []
    for word in words:
        translated_word = ''.join(str(mapping[char]) if char.isalpha() else char for char in word)
        translated.append(translated_word)
    if any(word.startswith('0') for word in translated):
        return False
    return eval(' + '.join(translated[:-1]) + ' == ' + translated[-1])

# Example usage:
puzzle = "SEND + MORE == MONEY"
solution = solve_cryptarithmetic(puzzle)
if solution:
    print("Solution found:")
    for letter, digit in solution.items():
        print(f"{letter}: {digit}")
else:
    print("No solution found.")
