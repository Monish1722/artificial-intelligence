import numpy as np

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        
        # Initialize weights and biases
        self.weights_input_hidden = np.random.rand(self.hidden_size, self.input_size)
        self.biases_input_hidden = np.random.rand(self.hidden_size, 1)
        
        self.weights_hidden_output = np.random.rand(self.output_size, self.hidden_size)
        self.biases_hidden_output = np.random.rand(self.output_size, 1)
        
    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))
    
    def sigmoid_derivative(self, x):
        return x * (1 - x)
    
    def forward(self, x):
        # Forward propagation through the network
        
        # Input to hidden layer
        hidden_input = np.dot(self.weights_input_hidden, x) + self.biases_input_hidden
        hidden_output = self.sigmoid(hidden_input)
        
        # Hidden to output layer
        output = np.dot(self.weights_hidden_output, hidden_output) + self.biases_hidden_output
        final_output = self.sigmoid(output)
        
        return final_output
    
    def train(self, X, y, epochs, learning_rate):
        for epoch in range(epochs):
            for inputs, target in zip(X, y):
