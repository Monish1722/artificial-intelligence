import heapq

class PuzzleState:
    def __init__(self, puzzle, parent=None, move=None, depth=0):
        self.puzzle = puzzle
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = self.calculate_cost()
    
    def __lt__(self, other):
        return self.cost < other.cost
    
    def calculate_cost(self):
        return self.depth + self.calculate_heuristic()
    
    def calculate_heuristic(self):
        h = 0
        for i in range(3):
            for j in range(3):
                if self.puzzle[i][j] != 0:
                    goal_row = (self.puzzle[i][j] - 1) // 3
                    goal_col = (self.puzzle[i][j] - 1) % 3
                    h += abs(i - goal_row) + abs(j - goal_col)
        return h

    def get_next_states(self):
        next_states = []
        zero_pos = self.find_zero()
        moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        for move in moves:
            new_row, new_col = zero_pos[0] + move[0], zero_pos[1] + move[1]
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_puzzle = [row[:] for row in self.puzzle]
                new_puzzle[zero_pos[0]][zero_pos[1]], new_puzzle[new_row][new_col] = \
                    new_puzzle[new_row][new_col], new_puzzle[zero_pos[0]][zero_pos[1]]
                next_states.append(PuzzleState(new_puzzle, self, move, self.depth + 1))
        return next_states

    def find_zero(self):
        for i in range(3):
            for j in range(3):
                if self.puzzle[i][j] == 0:
                    return (i, j)

    def get_path(self):
        path = []
        current_state = self
        while current_state:
            path.append(current_state)
            current_state = current_state.parent
        return path[::-1]

def solve_puzzle(initial_state):
    open_list = []
    heapq.heappush(open_list, initial_state)
    closed_set = set()
    
    while open_list:
        current_state = heapq.heappop(open_list)
        
        if current_state.puzzle == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]:
            return current_state.get_path()
        
        closed_set.add(tuple(map(tuple, current_state.puzzle)))
        
        for next_state in current_state.get_next_states():
            if tuple(map(tuple, next_state.puzzle)) not in closed_set:
                heapq.heappush(open_list, next_state)
    
    return None

def print_solution(path):
    for state in path:
        for row in state.puzzle:
            print(row)
        print()

if __name__ == "__main__":
    initial_puzzle = [[1, 2, 3], [4, 5, 6], [7, 0, 8]]
    initial_state = PuzzleState(initial_puzzle)
    solution = solve_puzzle(initial_state)
    if solution:
        print("Solution found!")
        print(f"Number of moves: {len(solution) - 1}")
        print_solution(solution)
    else:
        print("No solution found!")
